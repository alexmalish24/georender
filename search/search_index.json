{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to georender","text":"<p>A python package for geospatial</p> <ul> <li>Free software: MIT License</li> <li>Documentation: https://alexmalish24.github.io/georender</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>Visualizing vector and raster data</li> <li>Analyzing vector and raster data</li> <li>print the message</li> </ul>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#v001-date","title":"v0.0.1 - Date","text":"<p>Improvement:</p> <ul> <li>TBD</li> </ul> <p>New Features:</p> <ul> <li>TBD</li> </ul>"},{"location":"common/","title":"common module","text":"<p>The common module contains common functions and classes used by the other modules.</p>"},{"location":"common/#georender.common.hello_world","title":"<code>hello_world()</code>","text":"<p>Prints \"Hello World!\" to the console.</p> Source code in <code>georender/common.py</code> <pre><code>def hello_world():\n    \"\"\"Prints \"Hello World!\" to the console.\n    \"\"\"\n    print(\"Hello World!\")\n</code></pre>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/alexmalish24/georender/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with <code>bug</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with <code>enhancement</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>georender could always use more documentation, whether as part of the official georender docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/alexmalish24/georender/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions are welcome :)</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started!","text":"<p>Ready to contribute? Here's how to set up georender for local development.</p> <ol> <li> <p>Fork the georender repo on GitHub.</p> </li> <li> <p>Clone your fork locally:</p> <pre><code>$ git clone git@github.com:your_name_here/georender.git\n</code></pre> </li> <li> <p>Install your local copy into a virtualenv. Assuming you have     virtualenvwrapper installed, this is how you set up your fork for     local development:</p> <pre><code>$ mkvirtualenv georender\n$ cd georender/\n$ python setup.py develop\n</code></pre> </li> <li> <p>Create a branch for local development:</p> <pre><code>$ git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <p>Now you can make your changes locally.</p> </li> <li> <p>When you're done making changes, check that your changes pass flake8     and the tests, including testing other Python versions with tox:</p> <pre><code>$ flake8 georender tests\n$ python setup.py test or pytest\n$ tox\n</code></pre> <p>To get flake8 and tox, just pip install them into your virtualenv.</p> </li> <li> <p>Commit your changes and push your branch to GitHub:</p> <pre><code>$ git add .\n$ git commit -m \"Your detailed description of your changes.\"\n$ git push origin name-of-your-bugfix-or-feature\n</code></pre> </li> <li> <p>Submit a pull request through the GitHub website.</p> </li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated.     Put your new functionality into a function with a docstring, and add     the feature to the list in README.rst.</li> <li>The pull request should work for Python 3.8 and later, and     for PyPy. Check https://github.com/alexmalish24/georender/pull_requests and make sure that the tests pass for all     supported Python versions.</li> </ol>"},{"location":"faq/","title":"FAQ","text":""},{"location":"georender/","title":"georender module","text":"<p>Main module.</p>"},{"location":"georender/#georender.georender.Map","title":"<code> Map            (Map)         </code>","text":"<p>This is the map class that inherits from ipyleaflet.Map. It has the same parameters as ipyleaflet.Map.</p> <p>Parameters:</p> Name Type Description Default <code>ipyleaflet</code> <code>Map</code> <p>The map class from ipyleaflet.</p> required Source code in <code>georender/georender.py</code> <pre><code>class Map(ipyleaflet.Map):\n    \"\"\"This is the map class that inherits from ipyleaflet.Map. It has the same parameters as ipyleaflet.Map.\n\n    Args:\n        ipyleaflet (Map): The map class from ipyleaflet.\n    \"\"\"    \n\n    def __init__(self, center = [20, 0], zoom = 2, **kwargs):\n        \"\"\"\n        This is the constructor of the class. It initializes the map with the center and zoom parameters.\n\n        Ards:\n            center (list, optional): The center of the map. Defaults to [20, 0].\n            zoom (int, optional): The zoom of the map. Defaults to 2.\n        \"\"\"\n\n        if \"scroll_wheel_zoom\" not in kwargs:\n            kwargs[\"scroll_wheel_zoom\"] = True\n\n        super().__init__(center = center, zoom = zoom, **kwargs)\n\n    def add_tile_layer(self, url, name, **kwargs):\n        layer = ipyleaflet.TileLayer(url = url, name = name, **kwargs)\n        self.add(layer)\n\n    def add_basemap(self, name):\n        \"\"\"\n        Adds a basemap to the map.\n\n        Args:\n            name (str or object): The name of the basemap as a string or an object representing the basemap.\n\n        Raises:\n            TypeError: If the name is neither a string nor an object representing a basemap.\n        \"\"\" \n        if isinstance(name, str):\n            url = eval(f\"basemaps.{name}\").build_url()\n            self.add_tile_layer(url, name)\n        else:\n            self.add(name)\n\n    def add_layer_control(self, position = 'topright'):\n        \"\"\"\n        Adds a layer control to the map.\n\n        Args:\n            position (str, optional): The position of the layer control. Defaults to 'topright'.\n        \"\"\"\n        self.add_control(ipyleaflet.LayersControl(position = position))\n\n    def add_geojson(self, data, name = 'geojson', **kwargs):\n        \"\"\"\n        Adds a GeoJSON layer to the map.\n\n        Args:\n            data (str | dict): The GeoJSON data as a string or a dictionary.\n            name (str, optional): The name of the layer. Defaults to 'geojson'.\n        \"\"\"\n\n        import json\n\n        if isinstance(data, str):\n            with open(data) as f:\n                data = json.load(f)\n\n        if 'style' not in kwargs:\n            kwargs['style'] = {\"color\": \"blue\", \"weight\": 1, \"fillColor\": \"blue\", \"fillOpacity\": 0}\n\n        if 'hover_style' not in kwargs:\n            kwargs['hover_style'] = {\"fillColor\": \"blue\", \"fillOpacity\": 0.8}\n\n        layer = ipyleaflet.GeoJSON(data = data, name = name, **kwargs)\n        self.add(layer)\n\n    def add_shp(self, data, name=\"shp\", **kwargs):\n        \"\"\"\n        Adds a shapefile to the map.\n\n        Args:\n            data (str or dict): The path to the shapefile as a string or a dictionary containing GeoJSON data.\n            name (str, optional): The name of the shapefile layer. Defaults to \"shp\".\n            **kwargs: Additional keyword arguments to pass to the add_geojson method.\n\n        Example:\n            m.add_shp('path/to/shapefile.shp', name='My Shapefile')\n        \"\"\"  \n        import shapefile\n        import json\n\n        if isinstance(data, str):\n            with shapefile.Reader(data) as shp:\n                data = shp.__geo_interface__\n\n        self.add_geojson(data, name, **kwargs)\n\n    def add_image(self, url, bounds, name = 'image', **kwargs):\n        \"\"\"\n        Adds an image overlay to the map.\n\n        Args:\n            url (str): The URL of the image.\n            bounds (list): The bounds of the image as [[lat1, lon1], [lat2, lon2]].\n            name (str, optional): The name of the image overlay. Defaults to 'image'.\n        \"\"\"\n        layer = ipyleaflet.ImageOverlay(url = url, bounds = bounds, name = name, **kwargs)\n        self.add(layer)\n\n    def add_raster(self, data, name = 'raster', zoom_to_layer = True, **kwargs):\n        \"\"\"\n        Adds a raster layer to the map.\n\n        Args:\n            data (str): The path to the raster file.\n            name (str, optional): The name of the raster layer. Defaults to 'raster'.\n        \"\"\"\n\n        try:\n            from localtileserver import TileClient, get_leaflet_tile_layer\n\n        except ImportError:\n            raise ImportError(\"Please install the localtileserver package to use this feature.\")\n\n        client = TileClient(data)\n        layer = get_leaflet_tile_layer(client, name=name, **kwargs)\n        self.add(layer) \n\n        if zoom_to_layer:\n            self.center = client.center()\n            self.zoom = client.default_zoom\n\n    def add_zoom_slider( \n        self, description=\"Zoom level\", min=0, max=24, value=10, position=\"topright\"\n    ):\n        \"\"\"Adds a zoom slider to the map.\n\n        Args:\n            position (str, optional): The position of the zoom slider. Defaults to \"topright\".\n        \"\"\"\n        zoom_slider = widgets.IntSlider(\n            description=description, min=min, max=max, value=value\n        )\n\n        control = ipyleaflet.WidgetControl(widget=zoom_slider, position=position)\n        self.add(control)\n        widgets.jslink((zoom_slider, \"value\"), (self, \"zoom\"))\n\n    def add_widget(self, widget, position=\"topright\"):\n        \"\"\"Adds a widget to the map.\n\n        Args:\n            widget (object): The widget to be added.\n            position (str, optional): The position of the widget. Defaults to \"topright\".\n        \"\"\"\n        control = ipyleaflet.WidgetControl(widget=widget, position=position)\n        self.add(control)\n\n    def add_opacity_slider(\n        self, layer_index=-1, description=\"Opacity\", position=\"topright\"\n    ):\n        \"\"\"Adds an opacity slider to the map.\n\n        Args:\n            layer (object): The layer to which the opacity slider is added.\n            description (str, optional): The description of the opacity slider. Defaults to \"Opacity\".\n            position (str, optional): The position of the opacity slider. Defaults to \"topright\".\n        \"\"\"\n        layer = self.layers[layer_index]\n        opacity_slider = widgets.FloatSlider(\n            description=description,\n            min=0,\n            max=1,\n            value=layer.opacity,\n            style={\"description_width\": \"initial\"},\n        )\n\n        def update_opacity(change):\n            layer.opacity = change[\"new\"]\n\n        opacity_slider.observe(update_opacity, \"value\")\n\n        control = ipyleaflet.WidgetControl(widget=opacity_slider, position=position)\n        self.add(control)\n\n    def add_basemap_gui(self, basemaps=None, position=\"topright\"):\n        \"\"\"Adds a basemap GUI to the map.\n\n        Args:\n            position (str, optional): The position of the basemap GUI. Defaults to \"topright\".\n        \"\"\"\n\n        basemap_selector = widgets.Dropdown(\n            options=[\n                \"OpenStreetMap\",\n                \"OpenTopoMap\",\n                \"Esri.WorldImagery\",\n                \"Esri.NatGeoWorldMap\",\n                \"CartoDB.Positron\",\n                \"CartoDB.DarkMatter\",\n            ],\n            description=\"Basemap\",\n        )\n\n        def update_basemap(change):\n            self.add_basemap(change[\"new\"])\n\n        basemap_selector.observe(update_basemap, \"value\")\n\n        control = ipyleaflet.WidgetControl(widget=basemap_selector, position=position)\n        self.add(control)\n</code></pre>"},{"location":"georender/#georender.georender.Map.__init__","title":"<code>__init__(self, center=[20, 0], zoom=2, **kwargs)</code>  <code>special</code>","text":"<p>This is the constructor of the class. It initializes the map with the center and zoom parameters.</p> <p>Ards</p> <p>center (list, optional): The center of the map. Defaults to [20, 0]. zoom (int, optional): The zoom of the map. Defaults to 2.</p> Source code in <code>georender/georender.py</code> <pre><code>def __init__(self, center = [20, 0], zoom = 2, **kwargs):\n    \"\"\"\n    This is the constructor of the class. It initializes the map with the center and zoom parameters.\n\n    Ards:\n        center (list, optional): The center of the map. Defaults to [20, 0].\n        zoom (int, optional): The zoom of the map. Defaults to 2.\n    \"\"\"\n\n    if \"scroll_wheel_zoom\" not in kwargs:\n        kwargs[\"scroll_wheel_zoom\"] = True\n\n    super().__init__(center = center, zoom = zoom, **kwargs)\n</code></pre>"},{"location":"georender/#georender.georender.Map.add_basemap","title":"<code>add_basemap(self, name)</code>","text":"<p>Adds a basemap to the map.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str or object</code> <p>The name of the basemap as a string or an object representing the basemap.</p> required <p>Exceptions:</p> Type Description <code>TypeError</code> <p>If the name is neither a string nor an object representing a basemap.</p> Source code in <code>georender/georender.py</code> <pre><code>def add_basemap(self, name):\n    \"\"\"\n    Adds a basemap to the map.\n\n    Args:\n        name (str or object): The name of the basemap as a string or an object representing the basemap.\n\n    Raises:\n        TypeError: If the name is neither a string nor an object representing a basemap.\n    \"\"\" \n    if isinstance(name, str):\n        url = eval(f\"basemaps.{name}\").build_url()\n        self.add_tile_layer(url, name)\n    else:\n        self.add(name)\n</code></pre>"},{"location":"georender/#georender.georender.Map.add_basemap_gui","title":"<code>add_basemap_gui(self, basemaps=None, position='topright')</code>","text":"<p>Adds a basemap GUI to the map.</p> <p>Parameters:</p> Name Type Description Default <code>position</code> <code>str</code> <p>The position of the basemap GUI. Defaults to \"topright\".</p> <code>'topright'</code> Source code in <code>georender/georender.py</code> <pre><code>def add_basemap_gui(self, basemaps=None, position=\"topright\"):\n    \"\"\"Adds a basemap GUI to the map.\n\n    Args:\n        position (str, optional): The position of the basemap GUI. Defaults to \"topright\".\n    \"\"\"\n\n    basemap_selector = widgets.Dropdown(\n        options=[\n            \"OpenStreetMap\",\n            \"OpenTopoMap\",\n            \"Esri.WorldImagery\",\n            \"Esri.NatGeoWorldMap\",\n            \"CartoDB.Positron\",\n            \"CartoDB.DarkMatter\",\n        ],\n        description=\"Basemap\",\n    )\n\n    def update_basemap(change):\n        self.add_basemap(change[\"new\"])\n\n    basemap_selector.observe(update_basemap, \"value\")\n\n    control = ipyleaflet.WidgetControl(widget=basemap_selector, position=position)\n    self.add(control)\n</code></pre>"},{"location":"georender/#georender.georender.Map.add_geojson","title":"<code>add_geojson(self, data, name='geojson', **kwargs)</code>","text":"<p>Adds a GeoJSON layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str | dict</code> <p>The GeoJSON data as a string or a dictionary.</p> required <code>name</code> <code>str</code> <p>The name of the layer. Defaults to 'geojson'.</p> <code>'geojson'</code> Source code in <code>georender/georender.py</code> <pre><code>def add_geojson(self, data, name = 'geojson', **kwargs):\n    \"\"\"\n    Adds a GeoJSON layer to the map.\n\n    Args:\n        data (str | dict): The GeoJSON data as a string or a dictionary.\n        name (str, optional): The name of the layer. Defaults to 'geojson'.\n    \"\"\"\n\n    import json\n\n    if isinstance(data, str):\n        with open(data) as f:\n            data = json.load(f)\n\n    if 'style' not in kwargs:\n        kwargs['style'] = {\"color\": \"blue\", \"weight\": 1, \"fillColor\": \"blue\", \"fillOpacity\": 0}\n\n    if 'hover_style' not in kwargs:\n        kwargs['hover_style'] = {\"fillColor\": \"blue\", \"fillOpacity\": 0.8}\n\n    layer = ipyleaflet.GeoJSON(data = data, name = name, **kwargs)\n    self.add(layer)\n</code></pre>"},{"location":"georender/#georender.georender.Map.add_image","title":"<code>add_image(self, url, bounds, name='image', **kwargs)</code>","text":"<p>Adds an image overlay to the map.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The URL of the image.</p> required <code>bounds</code> <code>list</code> <p>The bounds of the image as [[lat1, lon1], [lat2, lon2]].</p> required <code>name</code> <code>str</code> <p>The name of the image overlay. Defaults to 'image'.</p> <code>'image'</code> Source code in <code>georender/georender.py</code> <pre><code>def add_image(self, url, bounds, name = 'image', **kwargs):\n    \"\"\"\n    Adds an image overlay to the map.\n\n    Args:\n        url (str): The URL of the image.\n        bounds (list): The bounds of the image as [[lat1, lon1], [lat2, lon2]].\n        name (str, optional): The name of the image overlay. Defaults to 'image'.\n    \"\"\"\n    layer = ipyleaflet.ImageOverlay(url = url, bounds = bounds, name = name, **kwargs)\n    self.add(layer)\n</code></pre>"},{"location":"georender/#georender.georender.Map.add_layer_control","title":"<code>add_layer_control(self, position='topright')</code>","text":"<p>Adds a layer control to the map.</p> <p>Parameters:</p> Name Type Description Default <code>position</code> <code>str</code> <p>The position of the layer control. Defaults to 'topright'.</p> <code>'topright'</code> Source code in <code>georender/georender.py</code> <pre><code>def add_layer_control(self, position = 'topright'):\n    \"\"\"\n    Adds a layer control to the map.\n\n    Args:\n        position (str, optional): The position of the layer control. Defaults to 'topright'.\n    \"\"\"\n    self.add_control(ipyleaflet.LayersControl(position = position))\n</code></pre>"},{"location":"georender/#georender.georender.Map.add_opacity_slider","title":"<code>add_opacity_slider(self, layer_index=-1, description='Opacity', position='topright')</code>","text":"<p>Adds an opacity slider to the map.</p> <p>Parameters:</p> Name Type Description Default <code>layer</code> <code>object</code> <p>The layer to which the opacity slider is added.</p> required <code>description</code> <code>str</code> <p>The description of the opacity slider. Defaults to \"Opacity\".</p> <code>'Opacity'</code> <code>position</code> <code>str</code> <p>The position of the opacity slider. Defaults to \"topright\".</p> <code>'topright'</code> Source code in <code>georender/georender.py</code> <pre><code>def add_opacity_slider(\n    self, layer_index=-1, description=\"Opacity\", position=\"topright\"\n):\n    \"\"\"Adds an opacity slider to the map.\n\n    Args:\n        layer (object): The layer to which the opacity slider is added.\n        description (str, optional): The description of the opacity slider. Defaults to \"Opacity\".\n        position (str, optional): The position of the opacity slider. Defaults to \"topright\".\n    \"\"\"\n    layer = self.layers[layer_index]\n    opacity_slider = widgets.FloatSlider(\n        description=description,\n        min=0,\n        max=1,\n        value=layer.opacity,\n        style={\"description_width\": \"initial\"},\n    )\n\n    def update_opacity(change):\n        layer.opacity = change[\"new\"]\n\n    opacity_slider.observe(update_opacity, \"value\")\n\n    control = ipyleaflet.WidgetControl(widget=opacity_slider, position=position)\n    self.add(control)\n</code></pre>"},{"location":"georender/#georender.georender.Map.add_raster","title":"<code>add_raster(self, data, name='raster', zoom_to_layer=True, **kwargs)</code>","text":"<p>Adds a raster layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str</code> <p>The path to the raster file.</p> required <code>name</code> <code>str</code> <p>The name of the raster layer. Defaults to 'raster'.</p> <code>'raster'</code> Source code in <code>georender/georender.py</code> <pre><code>def add_raster(self, data, name = 'raster', zoom_to_layer = True, **kwargs):\n    \"\"\"\n    Adds a raster layer to the map.\n\n    Args:\n        data (str): The path to the raster file.\n        name (str, optional): The name of the raster layer. Defaults to 'raster'.\n    \"\"\"\n\n    try:\n        from localtileserver import TileClient, get_leaflet_tile_layer\n\n    except ImportError:\n        raise ImportError(\"Please install the localtileserver package to use this feature.\")\n\n    client = TileClient(data)\n    layer = get_leaflet_tile_layer(client, name=name, **kwargs)\n    self.add(layer) \n\n    if zoom_to_layer:\n        self.center = client.center()\n        self.zoom = client.default_zoom\n</code></pre>"},{"location":"georender/#georender.georender.Map.add_shp","title":"<code>add_shp(self, data, name='shp', **kwargs)</code>","text":"<p>Adds a shapefile to the map.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str or dict</code> <p>The path to the shapefile as a string or a dictionary containing GeoJSON data.</p> required <code>name</code> <code>str</code> <p>The name of the shapefile layer. Defaults to \"shp\".</p> <code>'shp'</code> <code>**kwargs</code> <p>Additional keyword arguments to pass to the add_geojson method.</p> <code>{}</code> <p>Examples:</p> <p>m.add_shp('path/to/shapefile.shp', name='My Shapefile')</p> Source code in <code>georender/georender.py</code> <pre><code>def add_shp(self, data, name=\"shp\", **kwargs):\n    \"\"\"\n    Adds a shapefile to the map.\n\n    Args:\n        data (str or dict): The path to the shapefile as a string or a dictionary containing GeoJSON data.\n        name (str, optional): The name of the shapefile layer. Defaults to \"shp\".\n        **kwargs: Additional keyword arguments to pass to the add_geojson method.\n\n    Example:\n        m.add_shp('path/to/shapefile.shp', name='My Shapefile')\n    \"\"\"  \n    import shapefile\n    import json\n\n    if isinstance(data, str):\n        with shapefile.Reader(data) as shp:\n            data = shp.__geo_interface__\n\n    self.add_geojson(data, name, **kwargs)\n</code></pre>"},{"location":"georender/#georender.georender.Map.add_widget","title":"<code>add_widget(self, widget, position='topright')</code>","text":"<p>Adds a widget to the map.</p> <p>Parameters:</p> Name Type Description Default <code>widget</code> <code>object</code> <p>The widget to be added.</p> required <code>position</code> <code>str</code> <p>The position of the widget. Defaults to \"topright\".</p> <code>'topright'</code> Source code in <code>georender/georender.py</code> <pre><code>def add_widget(self, widget, position=\"topright\"):\n    \"\"\"Adds a widget to the map.\n\n    Args:\n        widget (object): The widget to be added.\n        position (str, optional): The position of the widget. Defaults to \"topright\".\n    \"\"\"\n    control = ipyleaflet.WidgetControl(widget=widget, position=position)\n    self.add(control)\n</code></pre>"},{"location":"georender/#georender.georender.Map.add_zoom_slider","title":"<code>add_zoom_slider(self, description='Zoom level', min=0, max=24, value=10, position='topright')</code>","text":"<p>Adds a zoom slider to the map.</p> <p>Parameters:</p> Name Type Description Default <code>position</code> <code>str</code> <p>The position of the zoom slider. Defaults to \"topright\".</p> <code>'topright'</code> Source code in <code>georender/georender.py</code> <pre><code>def add_zoom_slider( \n    self, description=\"Zoom level\", min=0, max=24, value=10, position=\"topright\"\n):\n    \"\"\"Adds a zoom slider to the map.\n\n    Args:\n        position (str, optional): The position of the zoom slider. Defaults to \"topright\".\n    \"\"\"\n    zoom_slider = widgets.IntSlider(\n        description=description, min=min, max=max, value=value\n    )\n\n    control = ipyleaflet.WidgetControl(widget=zoom_slider, position=position)\n    self.add(control)\n    widgets.jslink((zoom_slider, \"value\"), (self, \"zoom\"))\n</code></pre>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#stable-release","title":"Stable release","text":"<p>To install georender, run this command in your terminal:</p> <pre><code>pip install georender\n</code></pre> <p>This is the preferred method to install georender, as it will always install the most recent stable release.</p> <p>If you don't have pip installed, this Python installation guide can guide you through the process.</p>"},{"location":"installation/#from-sources","title":"From sources","text":"<p>To install georender from sources, run this command in your terminal:</p> <pre><code>pip install git+https://github.com/alexmalish24/georender\n</code></pre>"},{"location":"usage/","title":"Usage","text":"<p>To use georender in a project:</p> <pre><code>import georender\n</code></pre>"},{"location":"utils/","title":"utils module","text":"<p>Main module.</p>"},{"location":"utils/#georender.georender.Map","title":"<code> Map            (Map)         </code>","text":"<p>This is the map class that inherits from ipyleaflet.Map. It has the same parameters as ipyleaflet.Map.</p> <p>Parameters:</p> Name Type Description Default <code>ipyleaflet</code> <code>Map</code> <p>The map class from ipyleaflet.</p> required Source code in <code>georender/georender.py</code> <pre><code>class Map(ipyleaflet.Map):\n    \"\"\"This is the map class that inherits from ipyleaflet.Map. It has the same parameters as ipyleaflet.Map.\n\n    Args:\n        ipyleaflet (Map): The map class from ipyleaflet.\n    \"\"\"    \n\n    def __init__(self, center = [20, 0], zoom = 2, **kwargs):\n        \"\"\"\n        This is the constructor of the class. It initializes the map with the center and zoom parameters.\n\n        Ards:\n            center (list, optional): The center of the map. Defaults to [20, 0].\n            zoom (int, optional): The zoom of the map. Defaults to 2.\n        \"\"\"\n\n        if \"scroll_wheel_zoom\" not in kwargs:\n            kwargs[\"scroll_wheel_zoom\"] = True\n\n        super().__init__(center = center, zoom = zoom, **kwargs)\n\n    def add_tile_layer(self, url, name, **kwargs):\n        layer = ipyleaflet.TileLayer(url = url, name = name, **kwargs)\n        self.add(layer)\n\n    def add_basemap(self, name):\n        \"\"\"\n        Adds a basemap to the map.\n\n        Args:\n            name (str or object): The name of the basemap as a string or an object representing the basemap.\n\n        Raises:\n            TypeError: If the name is neither a string nor an object representing a basemap.\n        \"\"\" \n        if isinstance(name, str):\n            url = eval(f\"basemaps.{name}\").build_url()\n            self.add_tile_layer(url, name)\n        else:\n            self.add(name)\n\n    def add_layer_control(self, position = 'topright'):\n        \"\"\"\n        Adds a layer control to the map.\n\n        Args:\n            position (str, optional): The position of the layer control. Defaults to 'topright'.\n        \"\"\"\n        self.add_control(ipyleaflet.LayersControl(position = position))\n\n    def add_geojson(self, data, name = 'geojson', **kwargs):\n        \"\"\"\n        Adds a GeoJSON layer to the map.\n\n        Args:\n            data (str | dict): The GeoJSON data as a string or a dictionary.\n            name (str, optional): The name of the layer. Defaults to 'geojson'.\n        \"\"\"\n\n        import json\n\n        if isinstance(data, str):\n            with open(data) as f:\n                data = json.load(f)\n\n        if 'style' not in kwargs:\n            kwargs['style'] = {\"color\": \"blue\", \"weight\": 1, \"fillColor\": \"blue\", \"fillOpacity\": 0}\n\n        if 'hover_style' not in kwargs:\n            kwargs['hover_style'] = {\"fillColor\": \"blue\", \"fillOpacity\": 0.8}\n\n        layer = ipyleaflet.GeoJSON(data = data, name = name, **kwargs)\n        self.add(layer)\n\n    def add_shp(self, data, name=\"shp\", **kwargs):\n        \"\"\"\n        Adds a shapefile to the map.\n\n        Args:\n            data (str or dict): The path to the shapefile as a string or a dictionary containing GeoJSON data.\n            name (str, optional): The name of the shapefile layer. Defaults to \"shp\".\n            **kwargs: Additional keyword arguments to pass to the add_geojson method.\n\n        Example:\n            m.add_shp('path/to/shapefile.shp', name='My Shapefile')\n        \"\"\"  \n        import shapefile\n        import json\n\n        if isinstance(data, str):\n            with shapefile.Reader(data) as shp:\n                data = shp.__geo_interface__\n\n        self.add_geojson(data, name, **kwargs)\n\n    def add_image(self, url, bounds, name = 'image', **kwargs):\n        \"\"\"\n        Adds an image overlay to the map.\n\n        Args:\n            url (str): The URL of the image.\n            bounds (list): The bounds of the image as [[lat1, lon1], [lat2, lon2]].\n            name (str, optional): The name of the image overlay. Defaults to 'image'.\n        \"\"\"\n        layer = ipyleaflet.ImageOverlay(url = url, bounds = bounds, name = name, **kwargs)\n        self.add(layer)\n\n    def add_raster(self, data, name = 'raster', zoom_to_layer = True, **kwargs):\n        \"\"\"\n        Adds a raster layer to the map.\n\n        Args:\n            data (str): The path to the raster file.\n            name (str, optional): The name of the raster layer. Defaults to 'raster'.\n        \"\"\"\n\n        try:\n            from localtileserver import TileClient, get_leaflet_tile_layer\n\n        except ImportError:\n            raise ImportError(\"Please install the localtileserver package to use this feature.\")\n\n        client = TileClient(data)\n        layer = get_leaflet_tile_layer(client, name=name, **kwargs)\n        self.add(layer) \n\n        if zoom_to_layer:\n            self.center = client.center()\n            self.zoom = client.default_zoom\n\n    def add_zoom_slider( \n        self, description=\"Zoom level\", min=0, max=24, value=10, position=\"topright\"\n    ):\n        \"\"\"Adds a zoom slider to the map.\n\n        Args:\n            position (str, optional): The position of the zoom slider. Defaults to \"topright\".\n        \"\"\"\n        zoom_slider = widgets.IntSlider(\n            description=description, min=min, max=max, value=value\n        )\n\n        control = ipyleaflet.WidgetControl(widget=zoom_slider, position=position)\n        self.add(control)\n        widgets.jslink((zoom_slider, \"value\"), (self, \"zoom\"))\n\n    def add_widget(self, widget, position=\"topright\"):\n        \"\"\"Adds a widget to the map.\n\n        Args:\n            widget (object): The widget to be added.\n            position (str, optional): The position of the widget. Defaults to \"topright\".\n        \"\"\"\n        control = ipyleaflet.WidgetControl(widget=widget, position=position)\n        self.add(control)\n\n    def add_opacity_slider(\n        self, layer_index=-1, description=\"Opacity\", position=\"topright\"\n    ):\n        \"\"\"Adds an opacity slider to the map.\n\n        Args:\n            layer (object): The layer to which the opacity slider is added.\n            description (str, optional): The description of the opacity slider. Defaults to \"Opacity\".\n            position (str, optional): The position of the opacity slider. Defaults to \"topright\".\n        \"\"\"\n        layer = self.layers[layer_index]\n        opacity_slider = widgets.FloatSlider(\n            description=description,\n            min=0,\n            max=1,\n            value=layer.opacity,\n            style={\"description_width\": \"initial\"},\n        )\n\n        def update_opacity(change):\n            layer.opacity = change[\"new\"]\n\n        opacity_slider.observe(update_opacity, \"value\")\n\n        control = ipyleaflet.WidgetControl(widget=opacity_slider, position=position)\n        self.add(control)\n\n    def add_basemap_gui(self, basemaps=None, position=\"topright\"):\n        \"\"\"Adds a basemap GUI to the map.\n\n        Args:\n            position (str, optional): The position of the basemap GUI. Defaults to \"topright\".\n        \"\"\"\n\n        basemap_selector = widgets.Dropdown(\n            options=[\n                \"OpenStreetMap\",\n                \"OpenTopoMap\",\n                \"Esri.WorldImagery\",\n                \"Esri.NatGeoWorldMap\",\n                \"CartoDB.Positron\",\n                \"CartoDB.DarkMatter\",\n            ],\n            description=\"Basemap\",\n        )\n\n        def update_basemap(change):\n            self.add_basemap(change[\"new\"])\n\n        basemap_selector.observe(update_basemap, \"value\")\n\n        control = ipyleaflet.WidgetControl(widget=basemap_selector, position=position)\n        self.add(control)\n</code></pre>"},{"location":"utils/#georender.georender.Map.__init__","title":"<code>__init__(self, center=[20, 0], zoom=2, **kwargs)</code>  <code>special</code>","text":"<p>This is the constructor of the class. It initializes the map with the center and zoom parameters.</p> <p>Ards</p> <p>center (list, optional): The center of the map. Defaults to [20, 0]. zoom (int, optional): The zoom of the map. Defaults to 2.</p> Source code in <code>georender/georender.py</code> <pre><code>def __init__(self, center = [20, 0], zoom = 2, **kwargs):\n    \"\"\"\n    This is the constructor of the class. It initializes the map with the center and zoom parameters.\n\n    Ards:\n        center (list, optional): The center of the map. Defaults to [20, 0].\n        zoom (int, optional): The zoom of the map. Defaults to 2.\n    \"\"\"\n\n    if \"scroll_wheel_zoom\" not in kwargs:\n        kwargs[\"scroll_wheel_zoom\"] = True\n\n    super().__init__(center = center, zoom = zoom, **kwargs)\n</code></pre>"},{"location":"utils/#georender.georender.Map.add_basemap","title":"<code>add_basemap(self, name)</code>","text":"<p>Adds a basemap to the map.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str or object</code> <p>The name of the basemap as a string or an object representing the basemap.</p> required <p>Exceptions:</p> Type Description <code>TypeError</code> <p>If the name is neither a string nor an object representing a basemap.</p> Source code in <code>georender/georender.py</code> <pre><code>def add_basemap(self, name):\n    \"\"\"\n    Adds a basemap to the map.\n\n    Args:\n        name (str or object): The name of the basemap as a string or an object representing the basemap.\n\n    Raises:\n        TypeError: If the name is neither a string nor an object representing a basemap.\n    \"\"\" \n    if isinstance(name, str):\n        url = eval(f\"basemaps.{name}\").build_url()\n        self.add_tile_layer(url, name)\n    else:\n        self.add(name)\n</code></pre>"},{"location":"utils/#georender.georender.Map.add_basemap_gui","title":"<code>add_basemap_gui(self, basemaps=None, position='topright')</code>","text":"<p>Adds a basemap GUI to the map.</p> <p>Parameters:</p> Name Type Description Default <code>position</code> <code>str</code> <p>The position of the basemap GUI. Defaults to \"topright\".</p> <code>'topright'</code> Source code in <code>georender/georender.py</code> <pre><code>def add_basemap_gui(self, basemaps=None, position=\"topright\"):\n    \"\"\"Adds a basemap GUI to the map.\n\n    Args:\n        position (str, optional): The position of the basemap GUI. Defaults to \"topright\".\n    \"\"\"\n\n    basemap_selector = widgets.Dropdown(\n        options=[\n            \"OpenStreetMap\",\n            \"OpenTopoMap\",\n            \"Esri.WorldImagery\",\n            \"Esri.NatGeoWorldMap\",\n            \"CartoDB.Positron\",\n            \"CartoDB.DarkMatter\",\n        ],\n        description=\"Basemap\",\n    )\n\n    def update_basemap(change):\n        self.add_basemap(change[\"new\"])\n\n    basemap_selector.observe(update_basemap, \"value\")\n\n    control = ipyleaflet.WidgetControl(widget=basemap_selector, position=position)\n    self.add(control)\n</code></pre>"},{"location":"utils/#georender.georender.Map.add_geojson","title":"<code>add_geojson(self, data, name='geojson', **kwargs)</code>","text":"<p>Adds a GeoJSON layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str | dict</code> <p>The GeoJSON data as a string or a dictionary.</p> required <code>name</code> <code>str</code> <p>The name of the layer. Defaults to 'geojson'.</p> <code>'geojson'</code> Source code in <code>georender/georender.py</code> <pre><code>def add_geojson(self, data, name = 'geojson', **kwargs):\n    \"\"\"\n    Adds a GeoJSON layer to the map.\n\n    Args:\n        data (str | dict): The GeoJSON data as a string or a dictionary.\n        name (str, optional): The name of the layer. Defaults to 'geojson'.\n    \"\"\"\n\n    import json\n\n    if isinstance(data, str):\n        with open(data) as f:\n            data = json.load(f)\n\n    if 'style' not in kwargs:\n        kwargs['style'] = {\"color\": \"blue\", \"weight\": 1, \"fillColor\": \"blue\", \"fillOpacity\": 0}\n\n    if 'hover_style' not in kwargs:\n        kwargs['hover_style'] = {\"fillColor\": \"blue\", \"fillOpacity\": 0.8}\n\n    layer = ipyleaflet.GeoJSON(data = data, name = name, **kwargs)\n    self.add(layer)\n</code></pre>"},{"location":"utils/#georender.georender.Map.add_image","title":"<code>add_image(self, url, bounds, name='image', **kwargs)</code>","text":"<p>Adds an image overlay to the map.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The URL of the image.</p> required <code>bounds</code> <code>list</code> <p>The bounds of the image as [[lat1, lon1], [lat2, lon2]].</p> required <code>name</code> <code>str</code> <p>The name of the image overlay. Defaults to 'image'.</p> <code>'image'</code> Source code in <code>georender/georender.py</code> <pre><code>def add_image(self, url, bounds, name = 'image', **kwargs):\n    \"\"\"\n    Adds an image overlay to the map.\n\n    Args:\n        url (str): The URL of the image.\n        bounds (list): The bounds of the image as [[lat1, lon1], [lat2, lon2]].\n        name (str, optional): The name of the image overlay. Defaults to 'image'.\n    \"\"\"\n    layer = ipyleaflet.ImageOverlay(url = url, bounds = bounds, name = name, **kwargs)\n    self.add(layer)\n</code></pre>"},{"location":"utils/#georender.georender.Map.add_layer_control","title":"<code>add_layer_control(self, position='topright')</code>","text":"<p>Adds a layer control to the map.</p> <p>Parameters:</p> Name Type Description Default <code>position</code> <code>str</code> <p>The position of the layer control. Defaults to 'topright'.</p> <code>'topright'</code> Source code in <code>georender/georender.py</code> <pre><code>def add_layer_control(self, position = 'topright'):\n    \"\"\"\n    Adds a layer control to the map.\n\n    Args:\n        position (str, optional): The position of the layer control. Defaults to 'topright'.\n    \"\"\"\n    self.add_control(ipyleaflet.LayersControl(position = position))\n</code></pre>"},{"location":"utils/#georender.georender.Map.add_opacity_slider","title":"<code>add_opacity_slider(self, layer_index=-1, description='Opacity', position='topright')</code>","text":"<p>Adds an opacity slider to the map.</p> <p>Parameters:</p> Name Type Description Default <code>layer</code> <code>object</code> <p>The layer to which the opacity slider is added.</p> required <code>description</code> <code>str</code> <p>The description of the opacity slider. Defaults to \"Opacity\".</p> <code>'Opacity'</code> <code>position</code> <code>str</code> <p>The position of the opacity slider. Defaults to \"topright\".</p> <code>'topright'</code> Source code in <code>georender/georender.py</code> <pre><code>def add_opacity_slider(\n    self, layer_index=-1, description=\"Opacity\", position=\"topright\"\n):\n    \"\"\"Adds an opacity slider to the map.\n\n    Args:\n        layer (object): The layer to which the opacity slider is added.\n        description (str, optional): The description of the opacity slider. Defaults to \"Opacity\".\n        position (str, optional): The position of the opacity slider. Defaults to \"topright\".\n    \"\"\"\n    layer = self.layers[layer_index]\n    opacity_slider = widgets.FloatSlider(\n        description=description,\n        min=0,\n        max=1,\n        value=layer.opacity,\n        style={\"description_width\": \"initial\"},\n    )\n\n    def update_opacity(change):\n        layer.opacity = change[\"new\"]\n\n    opacity_slider.observe(update_opacity, \"value\")\n\n    control = ipyleaflet.WidgetControl(widget=opacity_slider, position=position)\n    self.add(control)\n</code></pre>"},{"location":"utils/#georender.georender.Map.add_raster","title":"<code>add_raster(self, data, name='raster', zoom_to_layer=True, **kwargs)</code>","text":"<p>Adds a raster layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str</code> <p>The path to the raster file.</p> required <code>name</code> <code>str</code> <p>The name of the raster layer. Defaults to 'raster'.</p> <code>'raster'</code> Source code in <code>georender/georender.py</code> <pre><code>def add_raster(self, data, name = 'raster', zoom_to_layer = True, **kwargs):\n    \"\"\"\n    Adds a raster layer to the map.\n\n    Args:\n        data (str): The path to the raster file.\n        name (str, optional): The name of the raster layer. Defaults to 'raster'.\n    \"\"\"\n\n    try:\n        from localtileserver import TileClient, get_leaflet_tile_layer\n\n    except ImportError:\n        raise ImportError(\"Please install the localtileserver package to use this feature.\")\n\n    client = TileClient(data)\n    layer = get_leaflet_tile_layer(client, name=name, **kwargs)\n    self.add(layer) \n\n    if zoom_to_layer:\n        self.center = client.center()\n        self.zoom = client.default_zoom\n</code></pre>"},{"location":"utils/#georender.georender.Map.add_shp","title":"<code>add_shp(self, data, name='shp', **kwargs)</code>","text":"<p>Adds a shapefile to the map.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str or dict</code> <p>The path to the shapefile as a string or a dictionary containing GeoJSON data.</p> required <code>name</code> <code>str</code> <p>The name of the shapefile layer. Defaults to \"shp\".</p> <code>'shp'</code> <code>**kwargs</code> <p>Additional keyword arguments to pass to the add_geojson method.</p> <code>{}</code> <p>Examples:</p> <p>m.add_shp('path/to/shapefile.shp', name='My Shapefile')</p> Source code in <code>georender/georender.py</code> <pre><code>def add_shp(self, data, name=\"shp\", **kwargs):\n    \"\"\"\n    Adds a shapefile to the map.\n\n    Args:\n        data (str or dict): The path to the shapefile as a string or a dictionary containing GeoJSON data.\n        name (str, optional): The name of the shapefile layer. Defaults to \"shp\".\n        **kwargs: Additional keyword arguments to pass to the add_geojson method.\n\n    Example:\n        m.add_shp('path/to/shapefile.shp', name='My Shapefile')\n    \"\"\"  \n    import shapefile\n    import json\n\n    if isinstance(data, str):\n        with shapefile.Reader(data) as shp:\n            data = shp.__geo_interface__\n\n    self.add_geojson(data, name, **kwargs)\n</code></pre>"},{"location":"utils/#georender.georender.Map.add_widget","title":"<code>add_widget(self, widget, position='topright')</code>","text":"<p>Adds a widget to the map.</p> <p>Parameters:</p> Name Type Description Default <code>widget</code> <code>object</code> <p>The widget to be added.</p> required <code>position</code> <code>str</code> <p>The position of the widget. Defaults to \"topright\".</p> <code>'topright'</code> Source code in <code>georender/georender.py</code> <pre><code>def add_widget(self, widget, position=\"topright\"):\n    \"\"\"Adds a widget to the map.\n\n    Args:\n        widget (object): The widget to be added.\n        position (str, optional): The position of the widget. Defaults to \"topright\".\n    \"\"\"\n    control = ipyleaflet.WidgetControl(widget=widget, position=position)\n    self.add(control)\n</code></pre>"},{"location":"utils/#georender.georender.Map.add_zoom_slider","title":"<code>add_zoom_slider(self, description='Zoom level', min=0, max=24, value=10, position='topright')</code>","text":"<p>Adds a zoom slider to the map.</p> <p>Parameters:</p> Name Type Description Default <code>position</code> <code>str</code> <p>The position of the zoom slider. Defaults to \"topright\".</p> <code>'topright'</code> Source code in <code>georender/georender.py</code> <pre><code>def add_zoom_slider( \n    self, description=\"Zoom level\", min=0, max=24, value=10, position=\"topright\"\n):\n    \"\"\"Adds a zoom slider to the map.\n\n    Args:\n        position (str, optional): The position of the zoom slider. Defaults to \"topright\".\n    \"\"\"\n    zoom_slider = widgets.IntSlider(\n        description=description, min=min, max=max, value=value\n    )\n\n    control = ipyleaflet.WidgetControl(widget=zoom_slider, position=position)\n    self.add(control)\n    widgets.jslink((zoom_slider, \"value\"), (self, \"zoom\"))\n</code></pre>"},{"location":"examples/csv/","title":"Csv","text":"In\u00a0[1]: Copied! <pre>import georender\n</pre> import georender In\u00a0[2]: Copied! <pre>from georender import utils\n</pre> from georender import utils In\u00a0[3]: Copied! <pre>csv = \"countries.csv\"\ndf = utils.csv_to_df(csv)\ndf\n</pre> csv = \"countries.csv\" df = utils.csv_to_df(csv) df  Out[3]: id name 0 AFG Afghanistan 1 AGO Angola 2 ALB Albania 3 ARE United Arab Emirates 4 ARG Argentina ... ... ... 174 PSE West Bank 175 YEM Yemen 176 ZAF South Africa 177 ZMB Zambia 178 ZWE Zimbabwe <p>179 rows \u00d7 2 columns</p>"},{"location":"examples/demo/","title":"Demo","text":"In\u00a0[1]: Copied! <pre>print('Hello demo!')\n</pre> print('Hello demo!') <pre>Hello demo!\n</pre>"},{"location":"examples/intro/","title":"Intro","text":"In\u00a0[1]: Copied! <pre>print('Hello World!')\n</pre> print('Hello World!') <pre>Hello World!\n</pre>"},{"location":"examples/ipyleaflet/","title":"Ipyleaflet","text":"In\u00a0[1]: Copied! <pre>import georender\n#import ipyleaflet\n</pre> import georender #import ipyleaflet In\u00a0[2]: Copied! <pre>from ipyleaflet import basemaps\n</pre> from ipyleaflet import basemaps In\u00a0[3]: Copied! <pre>url = eval(\"basemaps.OpenTopoMap\").build_url()\n</pre> url = eval(\"basemaps.OpenTopoMap\").build_url() In\u00a0[4]: Copied! <pre>m = georender.Map()\nm.add_basemap('NASAGIBS.ViirsEarthAtNight2012')\n# m.add_tile_layer(url=url, name='OpenTopoMap')\nm\n</pre> m = georender.Map() m.add_basemap('NASAGIBS.ViirsEarthAtNight2012') # m.add_tile_layer(url=url, name='OpenTopoMap') m Out[4]: In\u00a0[5]: Copied! <pre>m = georender.Map()\nm\n</pre> m = georender.Map() m Out[5]: In\u00a0[6]: Copied! <pre>m = georender.Map()\n\nurl = 'https://mt1.google.com/vt/lyrs=s&amp;x={x}&amp;y={y}&amp;z={z}'\n#layer = ipyleaflet.TileLayer(url=url, name='Google Satellite', opacity=1)\nm.add_tile_layer(url, name='Google Satellite', attribution='Google')\n\nm\n</pre> m = georender.Map()  url = 'https://mt1.google.com/vt/lyrs=s&amp;x={x}&amp;y={y}&amp;z={z}' #layer = ipyleaflet.TileLayer(url=url, name='Google Satellite', opacity=1) m.add_tile_layer(url, name='Google Satellite', attribution='Google')  m Out[6]: In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[7]: Copied! <pre>from ipyleaflet import Map, basemaps\n\ncenter = [38.128, 2.588]\nzoom = 5\n\nm = Map(basemap=basemaps.Gaode.Satellite, center=center, zoom=zoom)\n</pre> from ipyleaflet import Map, basemaps  center = [38.128, 2.588] zoom = 5  m = Map(basemap=basemaps.Gaode.Satellite, center=center, zoom=zoom) In\u00a0[8]: Copied! <pre>#m.clear_controls()\n</pre> #m.clear_controls() In\u00a0[9]: Copied! <pre>m.controls = m.controls[:1]\n</pre> m.controls = m.controls[:1]"},{"location":"examples/ipywidget/","title":"Ipywidget","text":"<p>import libraries</p> In\u00a0[1]: Copied! <pre># !pip install georender\n</pre> # !pip install georender  In\u00a0[2]: Copied! <pre># import georender\n# import ipywidgets as widgets\n</pre> # import georender # import ipywidgets as widgets In\u00a0[3]: Copied! <pre># m=georender.Map()\n# m.add_basemap_gui()\n# m\n</pre> # m=georender.Map() # m.add_basemap_gui() # m In\u00a0[4]: Copied! <pre># int_range = widgets.FloatSlider(value=1, min=0, max=1, step=0.01, description='Opacity:')\n\n# def on_value_change(change):\n#     m.layers[-1].opacity = change['new']\n# int_range.observe(on_value_change, names='value')\n# int_range\n</pre> # int_range = widgets.FloatSlider(value=1, min=0, max=1, step=0.01, description='Opacity:')  # def on_value_change(change): #     m.layers[-1].opacity = change['new'] # int_range.observe(on_value_change, names='value') # int_range In\u00a0[5]: Copied! <pre># m.add_widget(int_range)\n</pre> # m.add_widget(int_range) In\u00a0[6]: Copied! <pre># m.layers[-1].opacity = 0.5\n</pre> # m.layers[-1].opacity = 0.5 In\u00a0[7]: Copied! <pre># m.add_opacity_slider(layer_index=0)\n</pre> # m.add_opacity_slider(layer_index=0) In\u00a0[8]: Copied! <pre># import leafmap\n</pre> # import leafmap"},{"location":"examples/raster/","title":"Raster","text":"In\u00a0[1]: Copied! <pre>import georender\n</pre> import georender In\u00a0[2]: Copied! <pre>m = georender.Map()\n\n# url = \"https://i.gifer.com/6Q1f.gif\"\n# url='../06Q1fSz.png',\n# bounds=((13, -130), (32, -100))\n# m.add_image(url, bounds=bounds)\n# # m.scroll_wheel_zoom = True\n# m.add_layer_control()\n# m\n</pre> m = georender.Map()  # url = \"https://i.gifer.com/6Q1f.gif\" # url='../06Q1fSz.png', # bounds=((13, -130), (32, -100)) # m.add_image(url, bounds=bounds) # # m.scroll_wheel_zoom = True # m.add_layer_control() # m  In\u00a0[3]: Copied! <pre># m = georender.Map()\n# # data ='https://github.com/opengeos/datasets/releases/download/raster/srtm90.tif'\n# m.add_raster(data, colormap='terrain')\n# m\n</pre> # m = georender.Map() # # data ='https://github.com/opengeos/datasets/releases/download/raster/srtm90.tif' # m.add_raster(data, colormap='terrain') # m In\u00a0[4]: Copied! <pre>m.layers[-1].url\n</pre> m.layers[-1].url Out[4]: <pre>'https://tile.openstreetmap.org/{z}/{x}/{y}.png'</pre> In\u00a0[5]: Copied! <pre>m.layers[-1].interact(opacity=(0.0, 1.0, 0.1))\n</pre> m.layers[-1].interact(opacity=(0.0, 1.0, 0.1)) Out[5]:"},{"location":"examples/vector/","title":"Vector","text":"In\u00a0[10]: Copied! <pre>import georender\n</pre> import georender In\u00a0[13]: Copied! <pre># m = georender.Map()\n# m.add_basemap('OpenTopoMap')\n# m.add_geojson(\"europe_110.geo.json\")\n# # m.add_geojson(\"countries.geojson\", name='countries')\n# # m.add_shp(\"countries.shp\", name='countries')\n# m.add_layer_control()\n# m\n</pre> # m = georender.Map() # m.add_basemap('OpenTopoMap') # m.add_geojson(\"europe_110.geo.json\") # # m.add_geojson(\"countries.geojson\", name='countries') # # m.add_shp(\"countries.shp\", name='countries') # m.add_layer_control() # m Out[13]: <pre>Map(center=[20, 0], controls=(ZoomControl(options=['position', 'zoom_in_text', 'zoom_in_title', 'zoom_out_text\u2026</pre> In\u00a0[\u00a0]: Copied! <pre># m = georender.Map()\n# m.add_basemap('OpenTopoMap')\n# #m.add_geojson(\"europe_110.geo.json\")\n\n\n# style = {\n#     'opacity': 1, 'dashArray': '9', 'fillOpacity': 0.5, 'weight': 1\n# }\n# hover_style = {\n#     'color': 'blue', 'dashArray': '0', 'fillOpacity': 0.5\n# }\n# m.add_geojson(\"countries.geojson\", name='countries', style=style, hover_style=hover_style)\n# m.add_layer_control()\n# m\n</pre> # m = georender.Map() # m.add_basemap('OpenTopoMap') # #m.add_geojson(\"europe_110.geo.json\")   # style = { #     'opacity': 1, 'dashArray': '9', 'fillOpacity': 0.5, 'weight': 1 # } # hover_style = { #     'color': 'blue', 'dashArray': '0', 'fillOpacity': 0.5 # } # m.add_geojson(\"countries.geojson\", name='countries', style=style, hover_style=hover_style) # m.add_layer_control() # m  In\u00a0[\u00a0]: Copied! <pre># import json\n# from ipyleaflet import Map, GeoJSON\n\n# with open('europe_110.geo.json', 'r') as f:\n#     data = json.load(f)\n# data\n</pre> # import json # from ipyleaflet import Map, GeoJSON  # with open('europe_110.geo.json', 'r') as f: #     data = json.load(f) # data"}]}